#include <stdio.h>
#include <stdlib.h>
using namespace std;
 
const int MAX = 100;
 
// Aquí es donde se va a almacenar los vértices
int almacenar[MAX], n;
 
// Grafico
int graph[MAX][MAX];
 
// Grado de los vértices
int d[MAX];
 
// Función para comprobar si el conjunto de
// los vértices en la matriz de la tienda son una pandilla o no
bool is_clique(int b)
{
 
    // Ejecutar un bucle para todo el conjunto de bordes
    for (int i = 1; i < b; i++) {
        for (int j = i + 1; j < b; j++)
 
            // Caso si falta algún borde
            if (graph[store[i]][store[j]] == 0)
                return false;
    }
    return true;
}
 
// Función para encontrar todos los tamaños
// de camarillas máximas
int maxCliques(int i, int l)
{
    // Tamaño máximo del clique
    int max_ = 0;
 
    // Aquí comprueba si hay vértices de i + 1
    // se puede insertar
    for (int j = i + 1; j <= n; j++) {
 
        // Agrega el vértice para almacenar
        almacenar[l] = j;
 
        // If the graph is not a clique of size k then
        // it cannot be a clique by adding another edge
        if (is_clique(l + 1)) {
 
            // Update max
            max_ = max(max_, l);
 
            // Verifica si se puede agregar otro borde
            max_ = max(max_, maxCliques(j, l + 1));
        }
    }
    return max_;
}
 
// Principal
int main()
{
    int edges[][2] = { { 1, 2 }, { 2, 3 }, { 3, 1 },
                       { 4, 3 }, { 4, 1 }, { 4, 2 } };
    int size = sizeof(edges) / sizeof(edges[0]);
    n = 4;
 
    for (int i = 0; i < size; i++) {
        graph[edges[i][0]][edges[i][1]] = 1;
        graph[edges[i][1]][edges[i][0]] = 1;
        d[edges[i][0]]++;
        d[edges[i][1]]++;
    }
 
    cout << maxCliques(0, 1);
 
    return 0;
}
