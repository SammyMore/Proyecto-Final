# Proyecto Final
MAX = 100;
n = 0;
 
# Almacena los vértices
store = [0] * MAX;
 
# Parte del grafo
graph = [[0 for i in range(MAX)] for j in range(MAX)];
 
# Grado de los vértices
d = [0] * MAX;
 
# Función para comprobar si el conjunto de
# vértices en la matriz de la tienda es una camarilla o no
def is_clique(b):
 
    # Ejecutar un bucle para todo el conjunto de bordes
    for i in range(1, b):
        for j in range(i + 1, b):
 
            
             # Si falta algún borde
            if (graph[store[i]][store[j]] == 0):
                return False;
     
    return True;
 
# Función para encontrar todos los tamaños
# de maximos cliques
def maxCliques(i, l):
 
    # Maximo tamaño de clique
    max_ = 0;
 
    # Comprueba si hay vértices de i + 1
    # se puede insertar
    for j in range(i + 1, n + 1):
 
        # Agrega el vértice para almacenar
        store[l] = j;
 
        # Si el grafo no es un clique de tamaño k entonces
        # No puede haber un clique agregando otro borde
        if (is_clique(l + 1)):
 
            # Actualizar máx.
            max_ = max(max_, l);
 
            # Comprueba si se puede agregar otro borde
            max_ = max(max_, maxCliques(j, l + 1));
         
    return max_;
     
# Codigo principal
if __name__ == '__main__':
    edges = [[ 1, 2 ],[ 2, 3 ],[ 3, 1 ],
           [ 4, 3 ],[ 4, 1 ],[ 4, 2 ]];
    size = len(edges);
    n = 4;
 
    for i in range(size):
        graph[edges[i][0]][edges[i][1]] = 1;
        graph[edges[i][1]][edges[i][0]] = 1;
        d[edges[i][0]] += 1;
        d[edges[i][1]] += 1;
     
    print(maxCliques(0, 1));
